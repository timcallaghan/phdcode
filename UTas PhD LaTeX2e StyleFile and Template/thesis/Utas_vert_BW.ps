%!PS-Adobe-3.1 EPSF-3.0%%Title: Utas_vert(M).EPS%%Creator: Adobe Illustrator(R) 9.0%%AI8_CreatorVersion: 9.0%AI9_PrintingDataBegin%%For: User %%CreationDate: 19/2/04%%CropBox: 0.000000 0.000000 370.700195 464.379395%%BoundingBox: 0 0 371 465 %%HiResBoundingBox: 0.000000 0.000000 370.700195 464.379395%%LanguageLevel: 2 %%DocumentData: Clean7Bit%%Pages: 1 %%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Core 2.0 0%%DocumentFonts: %%DocumentSuppliedFonts: %%PageOrder: Ascend%%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %%EndComments%%BeginDefaults%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 233 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_src256 256 string def/AGMCORE_dst64 64 string def/AGMCORE_srcLen nd/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_imagestring0 nd/AGMCORE_imagestring1 nd/AGMCORE_imagestring2 nd/AGMCORE_imagestring3 nd/AGMCORE_imagestring4 nd/AGMCORE_imagestring5 nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_mbuf () def/AGMCORE_ybuf () def/AGMCORE_kbuf () def/AGMCORE_gbuf () def/AGMCORE_bbuf () def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_arg1 nd/AGMCORE_arg2 nd/AGMCORE_&setgray nd/AGMCORE_&image nd/AGMCORE_&colorimage nd/AGMCORE_&imagemask nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&&setcolorspace nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_in_rip_sep nd/AGMCORE_host_sep nd/AGMCORE_will_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ccimage_exists nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_ndx nd/AGMCORE_err_strings nd/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/bdf{	bind def} bind def/xdf{	exch def} def/ldf {	load def} def/ddf{	put} def	/xddf{	3 -1 roll put} def	/xpt{	exch put} def	/bdict	{		mark	} def		/edict	{		counttomark 2 idiv dup dict begin {def} repeat pop currentdict end	}def	/ps_level	/languagelevel where{		pop languagelevel	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/ndf{	1 index where{		pop pop pop	}{		dup xcheck		{bind}if		def	}ifelse} def/skip_image{	has_color ne{		dup 256 idiv		{currentfile AGMCORE_str256 readstring pop pop}repeat		currentfile AGMCORE_str256 0 4 -1 roll 256 mod getinterval		readstring pop pop	}{		pop	}ifelse} def/addprocs{     2{/exec load}repeat     3 1 roll     [ 5 1 roll ] bind cvx} def/colorbuf{	0 1 2 index length 1 sub		{		dup 2 index exch get 		255 exch sub 		2 index 		3 1 roll 		put		} for} def/makereadonlyarray{	/packedarray where		{pop packedarray}		{array astore readonly}	ifelse} def/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq 	{		dup /HalftoneType get 1 eq			{			/SpotFunction get			}			{			dup /HalftoneType get 2 eq				{				/GraySpotFunction get				}				{				pop				{abs exch abs 2 copy add 1 gt {1 sub dup mul exch 1 sub dup mul add 1 sub}				{dup mul exch dup mul add 1 exch sub}ifelse}bind				}			ifelse			}		ifelse	}	if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/stkpath_clp_npth{	strokepath clip newpath} def/stk_n_clp_npth{	gsave stroke grestore clip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	userdict begin	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont		/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def				/AGMCORE_arg2 xdf	/AGMCORE_arg1 xdf		clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore			currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto		/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			dup (.) ne AGMCORE_arg1 0 lt and				{				pop				}				{				stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt					{					currentpoint AGMCORE_deltaY sub exch pop					clippath pathbbox pop pop pop 44 add exch moveto					} if				AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show				} ifelse						0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{			dup 94 eq 				{				pop				AGMCORE_arg1 0 ge					{					AGMCORE_arg1 AGMCORE_str256 cvs					dup /AGMCORE_tmp exch length def					AGMCORE_str256 exch 0 exch putinterval					AGMCORE_str256 0 AGMCORE_tmp getinterval					stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt						{						currentpoint AGMCORE_deltaY sub exch pop						clippath pathbbox pop pop pop 44 add exch moveto						} if					AGMCORE_str256 0 AGMCORE_tmp getinterval show					}					{					/AGMCORE_arg1 0 def					} ifelse				0 1 AGMCORE_str256 length 1 sub					{					AGMCORE_str256 exch 0 put					}for				/AGMCORE_tmp 0 def				AGMCORE_arg1 0 ne					{					/AGMCORE_arg1 AGMCORE_arg2 def					} if				}				{				AGMCORE_str256 exch AGMCORE_tmp exch put				/AGMCORE_tmp AGMCORE_tmp 1 add def				}ifelse			} ifelse		} forall} bdflevel2{	/AGMCORE_map_reserved_ink_name	{		dup type /stringtype eq{			dup /Red eq{				pop (_Red_)			}{				dup /Green eq{					pop (_Green_)				}{					dup /Blue eq{						pop (_Blue_)					}{						dup /Cyan eq{							pop (_Cyan_)						}{							dup /Magenta eq{								pop (_Magenta_)							}{								dup /Yellow eq{									pop (_Yellow_)								}{									dup /Black eq{										pop (_Black_)									}{										dup / eq{											pop (Process)										}if									}ifelse								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse		}if	}def}if/doc_setup{	Adobe_AGM_Core begin		/AGMCORE_will_host_separate xdf	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf		errordict /AGM_handleerror known not		{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror			{			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and {				$error /newerror false put				AGMCORE_cur_err /AGMCORE_bad_environ eq					{					/AGMCORE_bad_environ AGMCORE_ps_level AGMCORE_ps_version					}					{					AGMCORE_cur_err 0 0					} ifelse				compose_error_msg				} if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def		AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if		/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def		/AGMCORE_&&setcolorspace /setcolorspace ldf	}if	/AGMCORE_&image systemdict/image get def	/AGMCORE_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMCORE_&colorimage /colorimage ldf	}if	/AGMCORE_in_rip_sep		level2{			currentpagedevice/Separations 2 copy known{				get			}{				pop pop false			}ifelse		}{			false		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_gstate_known{		where{			/Adobe_AGM_Core_Id known		}{			false		}ifelse	}ndf	/AGMCORE_GSTATE AGMCORE_gstate_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 7 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	end}def/page_setup{	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/AGMCORE_ccimage_exists /customcolorimage where {pop true}{false} ifelse def	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def		/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def		/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def		/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and AGMCORE_producing_seps or		}ifelse	def		AGMCORE_host_sep AGMCORE_will_host_separate not and {		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def		AGMCORE_color_space_onhost_seps	}if	/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots	}ifelse	{		/setcmykcolor[			{4 copy add add add 0 eq currentoverprint and{pop 0.0005}if}/exec cvx			/setcmykcolor load dup type/operatortype ne{/exec cvx}if		]cvx def	}if	AGMCORE_host_sep{		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf		/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def		/map_index	{		1 index mul exch getinterval {255 div} forall	}def		level2{		/mo /moveto ldf		/ln /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		/invert_image_samples		{			Adobe_AGM_Core/AGMCORE_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def		/get_gstate		{			AGMCORE_GSTATE begin			/AGMCORE_GSTATE_ctm AGMCORE_tmpmatrix currentmatrix def			/AGMCORE_GSTATE_clr_spc currentcolorspace def			/AGMCORE_GSTATE_clr_indx 0 def			/AGMCORE_GSTATE_clr_comps 12 array def			mark currentcolor counttomark				{AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 3 -1 roll put				/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 add def} repeat pop			/AGMCORE_GSTATE_fnt rootfont def			/AGMCORE_GSTATE_lw currentlinewidth def			/AGMCORE_GSTATE_lc currentlinecap def			/AGMCORE_GSTATE_lj currentlinejoin def			/AGMCORE_GSTATE_ml currentmiterlimit def			currentdash /AGMCORE_GSTATE_do xdf /AGMCORE_GSTATE_da xdf			/AGMCORE_GSTATE_sa currentstrokeadjust def						/AGMCORE_GSTATE_clr_rnd currentcolorrendering def			/AGMCORE_GSTATE_op currentoverprint def			/AGMCORE_GSTATE_bg currentblackgeneration cvlit def			/AGMCORE_GSTATE_ucr currentundercolorremoval cvlit def			currentcolortransfer 				cvlit /AGMCORE_GSTATE_gy_xfer xdf 				cvlit /AGMCORE_GSTATE_b_xfer xdf				cvlit /AGMCORE_GSTATE_g_xfer xdf 				cvlit /AGMCORE_GSTATE_r_xfer xdf			/AGMCORE_GSTATE_ht currenthalftone def			/AGMCORE_GSTATE_flt currentflat def			end		}ndf				/set_gstate		{			AGMCORE_GSTATE begin			AGMCORE_GSTATE_ctm setmatrix			AGMCORE_GSTATE_clr_spc setcolorspace			AGMCORE_GSTATE_clr_indx {AGMCORE_GSTATE_clr_comps AGMCORE_GSTATE_clr_indx 1 sub get			/AGMCORE_GSTATE_clr_indx AGMCORE_GSTATE_clr_indx 1 sub def} repeat setcolor			AGMCORE_GSTATE_fnt setfont			AGMCORE_GSTATE_lw setlinewidth			AGMCORE_GSTATE_lc setlinecap			AGMCORE_GSTATE_lj setlinejoin			AGMCORE_GSTATE_ml setmiterlimit			AGMCORE_GSTATE_da AGMCORE_GSTATE_do setdash			AGMCORE_GSTATE_sa setstrokeadjust						AGMCORE_GSTATE_clr_rnd setcolorrendering			AGMCORE_GSTATE_op setoverprint			AGMCORE_GSTATE_bg cvx setblackgeneration			AGMCORE_GSTATE_ucr cvx setundercolorremoval			AGMCORE_GSTATE_r_xfer cvx AGMCORE_GSTATE_g_xfer cvx AGMCORE_GSTATE_b_xfer cvx				AGMCORE_GSTATE_gy_xfer cvx setcolortransfer			AGMCORE_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or				{				currenthalftone /HalftoneType get AGMCORE_GSTATE_ht /HalftoneType get ne					{					  mark AGMCORE_GSTATE_ht {sethalftone} stopped cleartomark					} if				}{				AGMCORE_GSTATE_ht sethalftone				} ifelse			AGMCORE_GSTATE_flt setflat			end		}ndf		AGMCORE_producing_seps not{				/setcolorspace where{				/Adobe_AGM_Core_Id known not			}{				true			}ifelse			{				/setcolorspace				{					dup type dup /arraytype eq exch /packedarraytype eq or{						dup 0 get dup /Separation eq{							pop							[ exch {} forall ]							dup dup 1 get AGMCORE_map_reserved_ink_name 1 exch put						}{							/DeviceN eq {								[ exch {} forall ]								dup dup 1 get [ exch {AGMCORE_map_reserved_ink_name} forall ] 1 exch put							}if						}ifelse					}if					AGMCORE_&&setcolorspace 				}def			}if		}if		}{				/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/ln{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def				/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def				/n_color_components		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop 1			}{				/DeviceCMYK eq{					4				}{					3				}ifelse			}ifelse		} def				/setcolor_devicecolor		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def			/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse		/op /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/spclp /stkpath_clp_npth ldf	/f /fill ldf	/ef /eofill ldf	/s /stroke ldf	/sclp /stk_n_clp_npth ldf	/nclp /npth_clp ldf	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/idximg /indexed_imageormask ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf		currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall}def/page_trailer{	end}def/unload{	systemdict/languagelevel known{		systemdict/languagelevel get 2 ge{			userdict/Adobe_AGM_Core 2 copy known{				undef			}{				pop pop			}ifelse		}if	}if}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	Adobe_AGM_Core/AGMCORE_name xddf	false	currentpagedevice/SeparationColorNames get{		AGMCORE_name eq or	}forall}def/current_ink{	dup length 0 eq{		pop true	}{		Adobe_AGM_Core/ink_result false put		{			dup /ProcessCyan eq{				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf			}{				dup /ProcessMagenta eq{					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf				}{					dup /ProcessYellow eq{						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf					}{						dup /ProcessBlack eq{							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf						}{							dup /sep_colorspace_dict AGMCORE_gget dup null eq{								pop false ink_result or Adobe_AGM_Core/ink_result xddf							}{								/Name get eq{									1 setsepcolor									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf								}{									false ink_result or Adobe_AGM_Core/ink_result xddf								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse			pop 		} forall		ink_result	}ifelse}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 		/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf		AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx														AGMCORE_host_sep{								AGMCORE_is_cmyk_sep							}{								Name inRip_spot_has_ink not							}ifelse							{		 						/pop cvx 1							}if							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf												[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	1 setsepcolor	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		/MappedCSA CSA map_csa def		AGMCORE_host_sep level2 not and{			0 0 0 0 setcmykcolor		}{			[/Indexed MappedCSA 			level2 not has_color not and{				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{					pop [/DeviceGray]				}if				HiVal GrayLookup			}{				HiVal 				currentdict/RangeArray known{					{ 						/indexed_colorspace_dict AGMCORE_gget begin						Lookup exch 						dup HiVal gt{							pop HiVal						}if						NComponents mul NComponents getinterval {} forall						NComponents 1 sub -1 0{							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range							NComponents 1 roll						}for						end					} bind				}{					Lookup				}ifelse			}ifelse			] setcolorspace_opt						set_crd		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep{		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor	}{		setcolor	}ifelse} def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMCORE_&imagemask			}{				AGMCORE_&image			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMCORE_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMCORE_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint{		0 get		dup /DeviceGray eq{			pop AGMCORE_black_plate not		}{			/DeviceCMYK eq{				AGMCORE_is_cmyk_sep not			}if		}ifelse	}{		false	}ifelse}def/rdline {	currentfile AGMCORE_str256 readline pop} def/rdcmntline {	currentfile AGMCORE_str256 readline pop	(%) anchorsearch {pop} if} def/filter_cmyk{		dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch	{		AGMCORE_src256 readstring pop		dup length /AGMCORE_srcLen exch def		/AGMCORE_ndx 0 def				AGMCORE_plate_ndx 4 AGMCORE_srcLen 1 sub{			1 index exch get			AGMCORE_dst64 AGMCORE_ndx 3 -1 roll put			/AGMCORE_ndx AGMCORE_ndx 1 add def		}for		pop		AGMCORE_dst64 0 AGMCORE_ndx getinterval	}	bind	/exec cvx	] cvx} def/imageormask{	begin		SkipImageProc not{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq{					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					image				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					AGMCORE_host_sep{						currentgray 1 ne{							currentdict imageormask_sys						}{	 						currentoverprint not{			 					1 AGMCORE_&setgray	 							knockout_image_samples			 					currentdict imageormask_sys			 				}{			 					nulldevice currentdict imageormask_sys			 				}ifelse				 		}ifelse					}{						imagemask					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								MultipleDataSources{									4 {pop} repeat									/DataSource [										DataSource 0 get /exec cvx										DataSource 1 get /exec cvx										DataSource 2 get /exec cvx										DataSource 3 get /exec cvx										/AGMCORE_get_ink_data cvx									] cvx def								}{									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def								}ifelse									/Decode [ Decode 0 get Decode 1 get ] def								/MultipleDataSources false def								/NComponents 1 def								/Operator /image def								AGMCORE_is_cmyk_sep{									currentoverprint InksUsed current_ink not and{										nulldevice									}{										invert_image_samples									}ifelse								}{		 							currentoverprint not{		 								knockout_image_samples				 					}{				 						nulldevice				 					}ifelse					 			}ifelse						 		1 AGMCORE_&setgray								currentdict imageormask_sys							}{																	currentcolortransfer								{pop 1} exch addprocs 4 1 roll												{pop 1} exch addprocs 4 1 roll								{pop 1} exch addprocs 4 1 roll								{pop 1} exch addprocs 4 1 roll								setcolortransfer																	MultipleDataSources NComponents AGMCORE_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not{		 								currentoverprint not{		 									knockout_image_samples				 						}{				 							nulldevice				 						}ifelse					 				}if								}ifelse						 		1 AGMCORE_&setgray								currentdict imageormask_sys							}{								image							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentoverprint InksUsed current_ink not and{								}{									currentcolorspace overprint_plate not{										knockout_unitsq									}if								}ifelse							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}if	end}def/tint_image_to_color{	begin		Width Height BitsPerComponent ImageMatrix 		/DataSource load	end	Adobe_AGM_Core begin		/AGMCORE_mbuf 0 string def		/AGMCORE_ybuf 0 string def		/AGMCORE_kbuf 0 string def		{			colorbuf dup length AGMCORE_mbuf length ne				{				dup length dup dup				/AGMCORE_mbuf exch string def				/AGMCORE_ybuf exch string def				/AGMCORE_kbuf exch string def				} if			dup AGMCORE_mbuf copy AGMCORE_ybuf copy AGMCORE_kbuf copy pop		}		addprocs		{AGMCORE_mbuf}{AGMCORE_ybuf}{AGMCORE_kbuf} true 4 colorimage		end} def			/sep_imageormask_lev1{	begin		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{						{				255 mul round cvi GrayLookup exch get			} currenttransfer addprocs settransfer			currentdict imageormask		}{			/sep_colorspace_dict AGMCORE_gget/Components known{				MappedCSA 0 get /DeviceCMYK eq{					Components aload pop				}{					0 0 0 Components aload pop 1 exch sub				}ifelse								Adobe_AGM_Core/AGMCORE_k xddf 				Adobe_AGM_Core/AGMCORE_y xddf 				Adobe_AGM_Core/AGMCORE_m xddf 				Adobe_AGM_Core/AGMCORE_c xddf 									AGMCORE_y 0.0 eq AGMCORE_m 0.0 eq and AGMCORE_c 0.0 eq and{					{AGMCORE_k mul 1 exch sub} currenttransfer addprocs settransfer					currentdict imageormask				}{ 										currentcolortransfer					{AGMCORE_k mul 1 exch sub} exch addprocs 4 1 roll					{AGMCORE_y mul 1 exch sub} exch addprocs 4 1 roll					{AGMCORE_m mul 1 exch sub} exch addprocs 4 1 roll					{AGMCORE_c mul 1 exch sub} exch addprocs 4 1 roll					setcolortransfer					currentdict tint_image_to_color				}ifelse			}{								MappedCSA 0 get /DeviceGray eq {					{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer					currentdict imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll						{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll						{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll						{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						currentdict tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll						{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll						{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll						setcolortransfer 						currentdict tint_image_to_color					}ifelse				}ifelse			}ifelse		}ifelse	end}def/sep_image_lev1_sep{	begin		/sep_colorspace_dict AGMCORE_gget/Components known{			Components aload pop						Adobe_AGM_Core/AGMCORE_k xddf 			Adobe_AGM_Core/AGMCORE_y xddf 			Adobe_AGM_Core/AGMCORE_m xddf 			Adobe_AGM_Core/AGMCORE_c xddf 							{AGMCORE_c mul 1 exch sub}			{AGMCORE_m mul 1 exch sub}			{AGMCORE_y mul 1 exch sub}			{AGMCORE_k mul 1 exch sub}		}{ 			{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}			{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}			{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}			{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}		}ifelse				AGMCORE_get_ink_data currenttransfer addprocs settransfer				currentdict imageormask_sys				end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc not{		save mark 			AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMCORE_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentoverprint InksUsed current_ink not and{						}{							currentdict/ImageMatrix get concat							knockout_unitsq						}ifelse					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or{ 								knockout_image_samples		 					}{		 						nulldevice 		 					}ifelse							currentdict imageormask_sys 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}if	end	end}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin    currentdict 2 index known{    	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse	    addprocs /TransferFunction xdf 	    currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/read_image_file{	AGMCORE_imagefile 0 setfileposition	dup /DataSource {AGMCORE_imagefile AGMCORE_imbuf readstring pop} put	exch	load exec}def/write_image_file{	{ (AGMCORE_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Core/AGMCORE_imagefile xddf 		Adobe_AGM_Core/AGMCORE_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf		1 1 Height { 			pop			DataSource dup type /filetype eq{				AGMCORE_imbuf readstring pop			}{				exec			} ifelse			AGMCORE_imagefile exch writestring		}for		true	}ifelse}def/imageormask_l2_overprint{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if		AGMCORE_imagefile closefile (AGMCORE_imagefile) deletefile	}{		currentdict imageormask	}ifelse} def/indexed_imageormask{	begin		save mark 	 		currentdict 		AGMCORE_host_sep{ 						Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{					knockout_unitsq				}if			}{	 			AGMCORE_is_cmyk_sep{					Operator /imagemask eq{						imageormask_sys					}{						level2{							indexed_image_lev2_sep						}{							indexed_image_lev1_sep						}ifelse					}ifelse				}{					currentoverprint not{						knockout_image_samples		 				imageormask_sys		 			}{		 				nulldevice currentdict imageormask_sys		 			}ifelse				}ifelse			}ifelse 		}{			level2{				imageormask			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_imageormask_lev1{	/indexed_colorspace_dict AGMCORE_gget begin	begin		currentdict		MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{						{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer			imageormask		}{						MappedCSA 0 get /DeviceGray eq {				{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceCMYK eq {					currentcolortransfer					{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll					{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll					{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll					{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll					setcolortransfer 					tint_image_to_color				}{ 					currentcolortransfer					{pop 1} exch addprocs 4 1 roll					{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll					{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll					{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll					setcolortransfer 					tint_image_to_color				}ifelse			}ifelse		}ifelse	end end}def/indexed_image_lev1_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}		{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}		{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}		{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}				AGMCORE_get_ink_data currenttransfer addprocs settransfer				currentdict imageormask_sys				end end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin				currentcolorspace 		dup 1 /DeviceGray put		dup 3 [			currentcolorspace 3 get 			{				exch 4 mul 4 getinterval {} forall				AGMCORE_get_ink_data 255 div 1 exch sub			} /exec cvx		] cvx put		setcolorspace				currentdict 		Operator /imagemask eq{			AGMCORE_&imagemask		}{			AGMCORE_&image		}ifelse				end end}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get	}if}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			false op [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{		currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse		Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/OPIimage{	dup type /dicttype ne{		10 dict begin			/DataSource xdf			/ImageMatrix xdf			/BitsPerComponent xdf			/Height xdf			/Width xdf			/MultipleDataSources false def			/NComponents 1 def			/ImageType 1 def			/Decode [0 1 def]			/SkipImageProc {false} def			currentdict		end	}if	dup begin		/HostSepColorImage false def		currentdict/Decode known not{			/Decode [				0 				currentcolorspace 0 get /Indexed eq{					2 BitsPerComponent exp 1 sub				}{					1				}ifelse			] 			def		}if		currentdict/Operator known not{			/Operator /image def		}if	end	/sep_colorspace_dict AGMCORE_gget null eq{		imageormask	}{		gsave		dup begin invert_image_samples end		sep_imageormask		grestore	}ifelse}def/cpaint_gcomp{	AGM_preserve_spots{		gsave		nulldevice	}if}def/cpaint_gsep{	AGM_preserve_spots{		grestore		currentoverprint Adobe_AGM_Core/AGMCORE_ovp xddf 	}{			gsave		nulldevice	}ifelse}def/cpaint_gend{	AGM_preserve_spots{		Adobe_AGM_Core/AGMCORE_ovp get setoverprint	}{		grestore	}ifelse	newpath}def/AGMCORE_ctm_stack bdict	/push_ctm {		stack length size le{			stack dup length 2 mul array 			dup /stack exch def			copy pop		}if		stack size 3 -1 roll put		/size size 1 add def	}	/pop_ctm {		/size size 1 sub def		size 0 lt{ 			/size 0 def		}if		stack size get	}	/stack 1 array	/size 0 edict def/save_ctm{	matrix currentmatrix AGMCORE_ctm_stack begin 		push_ctm 	end}def/restore_ctm{	AGMCORE_ctm_stack begin		pop_ctm 	end	setmatrix}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}defendsystemdict /setpacking known{	setpacking} if%%EndResource%%EndProlog%%BeginSetupAdobe_AGM_Core/AGMCORE_err_strings 3 dict dup begin/AGMCORE_bad_environ (Environment not satisfactory for this job, which requests at leastPostScript Level ^\tand at least PostScript version ^. Ensure that the PPD is correct or thatthe PostScript  level requested is supported by this printer. ) def/AGMCORE_color_space_onhost_seps (This job has content that will not separatewith on-host methods. ) def/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend put2 2010 true Adobe_AGM_Core/doc_setup get exec%%EndSetup%%Page: name:1 1%%EndPageComments%%BeginPageSetupAdobe_AGM_Core/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddfmark/0 [/DeviceGray] add_csa/CSA /0 /1 [/DeviceCMYK] add_csa/CSA /1 /2 [/DeviceRGB] add_csa/CSA /2 cleartomark800 path_rez1 -1 scale 0 -464.379 translategsave[1 0 0 1 0 0 ] concatgsave0 0 mo0 464.379 ln370.7 464.379 ln370.7 0 lnclp18.3789 452.854 mo365.823 452.854 ln365.823 464.379 ln18.3789 464.379 ln18.3789 452.854 lnfalse op0 0 0 1 cmykf62.6455 437.855 mo26.8042 437.855 18.7271 418.335 18.7271 396.629 cv18.7271 322.421 ln40.6021 322.421 ln40.6021 395.283 ln40.6021 409.585 45.314 419.681 64.1602 419.681 cv80.9873 419.681 88.0542 412.614 88.0542 393.263 cv88.0542 322.421 ln109.761 322.421 ln109.761 391.917 ln109.761 422.879 92.5977 437.855 62.6455 437.855 cvf166.945 331.339 mo166.945 436.004 ln156.176 436.004 ln156.176 331.339 ln117.007 331.339 ln117.007 322.421 ln207.113 322.421 ln207.113 331.339 ln166.945 331.339 lnf281.872 436.004 mo271.607 407.062 ln219.275 407.062 ln208.674 436.004 ln197.4 436.004 ln240.142 322.421 ln251.751 322.421 ln294.324 436.004 ln281.872 436.004 lncp250.573 350.186 mo248.386 344.633 247.04 339.585 245.525 333.864 cv245.357 333.864 ln243.843 339.249 242.16 344.464 240.142 349.85 cv222.304 398.312 ln268.41 398.312 ln250.573 350.186 lnf330.146 437.35 mo321.565 437.35 313.488 436.34 307.262 434.489 cv307.935 423.72 ln314.665 426.076 323.247 427.926 331.156 427.926 cv346.469 427.926 359.594 421.701 359.594 405.21 cv359.594 377.109 305.747 387.206 305.747 351.869 cv305.747 334.201 320.051 321.075 344.281 321.075 cv351.517 321.075 358.079 321.917 364.642 323.095 cv363.969 333.191 ln357.575 331.171 350.171 329.994 343.44 329.994 cv326.108 329.994 316.685 338.239 316.685 350.691 cv316.685 378.119 370.7 368.191 370.7 403.696 cv370.7 423.551 355.219 437.35 330.146 437.35 cvf365.746 117.63 mo368.945 110.611 368.818 95.2231 360.476 84.2407 cv363.992 75.894 ln357.396 72.5967 354.096 69.0864 336.312 68.4258 cv337.626 63.1514 ln333.884 61.9526 324.158 61.1626 310.823 65.3481 cv310.823 65.3481 304.239 58.3223 283.143 65.7891 cv283.143 65.7891 275.681 57.8804 258.555 67.1079 cv258.555 67.1079 249.328 59.6401 233.942 71.064 cv233.942 71.064 220.76 72.3779 211.978 67.9844 cv203.195 63.5928 201.6 60.9146 200.998 56.564 cv199.238 43.8223 209.781 44.041 213.298 44.041 cv216.816 44.041 221.648 43.3833 221.204 48.2173 cv220.892 51.7153 217.693 53.2681 214.612 54.5864 cv214.612 54.5864 221.648 61.3955 229.985 60.958 cv238.343 60.5171 244.046 58.978 248 45.1387 cv248 45.1387 265.907 52.4028 276.121 54.8042 cv283.588 56.564 295.011 57.0044 302.923 52.6099 cv310.823 48.2173 322.246 41.6255 334.984 42.5044 cv346.463 43.2959 357.839 44.7012 365.306 49.5303 cv365.306 49.5303 371.454 33.2783 345.978 25.8096 cv345.978 25.8096 343.555 15.7036 319.181 20.981 cv319.181 20.981 323.348 -0.327637 289.74 0.33252 cv268.221 0.75293 261.774 6.83203 247.563 11.7539 cv230.432 17.6851 230.874 20.7593 209.781 18.7793 cv195.672 17.4585 182.545 29.3247 178.589 36.793 cv175.339 42.9341 172.435 61.3955 182.545 73.6987 cv192.654 85.9961 201.873 88.1968 216.378 90.3901 cv230.874 92.5874 263.38 92.1465 281.39 90.832 cv299.406 89.5142 321.377 89.5142 329.716 93.0264 cv338.065 96.5444 345.538 101.815 345.101 108.403 cv344.888 111.471 342.458 116.753 331.919 117.63 cv321.377 118.509 299.406 118.946 279.2 111.479 cv279.2 111.479 258.555 101.815 248 100.938 cv237.462 100.057 210.669 105.325 202.318 105.325 cv193.968 105.325 167.165 106.208 167.165 106.208 cv167.165 106.208 174.631 98.7368 169.8 90.832 cv169.8 90.832 177.712 85.1196 167.165 71.5015 cv167.165 71.5015 166.723 65.7891 164.525 63.5928 cv164.525 63.5928 165.408 52.1685 156.616 50.4136 cv156.616 50.4136 161.015 42.063 153.982 35.0337 cv153.982 35.0337 157.5 32.0479 157.5 27.5659 cv157.5 19.2207 157.059 11.312 140.364 2.52686 cv140.364 2.52686 136.412 13.0708 132.841 13.2891 cv127.157 13.6421 110.052 17.0244 105.66 19.2207 cv101.263 21.416 95.9927 24.9292 93.3569 28.8833 cv90.7217 32.8389 88.5249 34.5996 84.1304 35.4746 cv79.7402 36.3579 77.9795 35.4746 76.6626 36.793 cv75.3462 38.1099 74.4648 39.4282 74.9043 42.063 cv75.3462 44.7012 76.2217 54.3667 85.0068 59.6401 cv85.0068 59.6401 74.4648 60.958 70.5132 58.3223 cv70.5132 58.3223 68.7534 64.9097 74.4648 68.4258 cv80.1777 71.9399 81.4951 73.2568 87.6421 72.8179 cv87.6421 72.8179 83.6924 78.5283 85.8857 83.3599 cv88.084 88.1968 90.7217 91.2695 90.7217 91.2695 cv94.6748 89.5142 99.9487 85.1196 102.58 87.7554 cv102.58 87.7554 84.1304 108.403 79.7402 115.871 cv79.7402 115.871 62.1743 109.729 52.939 100.496 cv50.7412 98.2993 48.8027 92.2437 50.2993 87.7554 cv51.6201 83.8027 52.6528 80.209 49.8652 73.6987 cv47.0532 67.1396 43.7427 64.3286 41.2646 63.1323 cv43.5029 52.416 44.9751 45.3623 44.9751 45.3623 cv49.8076 45.7993 57.7676 43.3833 58.4316 41.4058 cv62.1899 30.1343 65.0171 29.5435 65.0171 29.5435 cv65.0171 29.5435 72.269 30.8608 77.5386 26.2485 cv81.5767 22.7178 84.1304 17.9038 88.5249 17.4619 cv92.9155 17.0244 95.5508 15.269 98.186 13.0708 cv100.825 10.8774 105.877 4.50537 117.024 4.9458 cv120.129 5.06494 121.859 1.86621 116.147 0.549805 cv110.432 -0.770508 102.142 0.11084 97.3105 1.42871 cv92.478 2.74658 90.2837 3.62158 86.3306 1.86621 cv82.3716 0.11084 77.9795 -0.327637 71.8296 1.86621 cv65.6772 4.06445 55.5742 5.38135 50.2993 3.18359 cv45.0303 0.987305 38.8799 -1.2085 30.9707 1.42871 cv23.061 4.06445 15.9775 6.26318 13.3423 11.9722 cv10.7065 17.6851 10.2686 24.269 14.6602 27.7886 cv13.2656 51.728 ln12.1143 51.7632 11.0928 52.0322 10.3223 52.6099 cv6.80811 55.2466 5.0498 57.0044 5.93262 67.1079 cv5.93262 67.1079 -5.49463 71.064 3.29688 84.2407 cv3.29688 84.2407 -1.42383 89.8672 4.17236 97.8579 cv6.53955 101.239 8.26172 102.754 10.2251 103.908 cv6.75098 163.541 ln6.75098 172.326 15.9775 183.311 19.9336 164.858 cv21.5518 157.304 26.042 135.91 30.7808 113.273 cv32.3291 115.964 34.0469 118.071 34.0469 118.071 cv34.0469 127.294 34.4858 134.763 45.9092 135.642 cv45.9092 135.642 44.5903 140.915 45.0303 144.426 cv45.4678 147.941 47.6655 151.9 50.7412 152.777 cv53.8159 153.653 58.6504 155.413 58.6504 155.413 cv58.6504 160.244 59.9683 164.198 62.6035 165.956 cv65.2388 167.714 69.1953 169.908 73.5859 167.272 cv77.9795 164.638 81.9336 162.438 81.9336 162.438 cv85.0068 167.714 97.752 177.379 97.752 177.379 cv91.5977 183.094 75.3462 195.83 57.7676 200.663 cv57.7676 200.663 56.0117 193.633 50.7412 189.239 cv45.4702 184.845 46.3472 179.137 27.8945 184.407 cv27.8945 184.407 19.0566 182.869 12.4648 186.823 cv12.4648 186.823 23.0645 189.239 24.3818 191.437 cv24.3818 191.437 24.3818 195.389 25.6968 198.463 cv25.6968 198.463 19.5493 205.496 18.6704 208.13 cv18.6704 208.13 5.48975 212.084 7.19189 226.362 cv7.19189 226.362 16.0347 219.551 17.791 219.113 cv17.791 219.113 19.9912 228.779 29.6519 230.096 cv29.6519 230.096 29.2114 239.323 31.4116 241.957 cv31.4116 241.957 27.8945 252.5 35.3125 259.313 cv35.3125 259.313 36.6821 248.111 38.439 246.355 cv38.439 246.355 42.3945 248.99 46.7861 246.355 cv51.1826 243.717 56.8921 237.564 60.8472 230.096 cv63.9209 231.855 ln64.7979 234.493 62.5483 242.176 62.1084 246.132 cv62.1084 246.132 64.3042 249.646 71.7788 233.833 cv71.7788 233.833 77.1045 230.538 78.415 226.581 cv78.415 226.581 89.4019 230.096 95.5508 220.873 cv95.5508 220.873 109.832 229.987 116.421 211.095 cv116.421 211.095 133.333 218.675 139.484 208.572 cv145.637 198.463 145.196 195.392 141.682 183.528 cv141.682 183.528 167.165 184.297 186.063 154.862 cv190.894 156.731 ln188.258 160.244 185.618 176.059 190.894 185.724 cv196.165 195.389 208.464 210.325 210.224 216.475 cv211.978 222.626 211.539 238.005 204.51 246.355 cv197.485 254.699 195.722 256.018 190.45 259.09 cv190.45 259.09 180.784 249.866 171.121 248.111 cv161.45 246.355 142.12 241.082 137.729 257.776 cv137.729 257.776 128.885 263.266 128.444 275.127 cv128.444 275.127 137.287 266.561 140.364 265.678 cv140.364 265.678 143.438 267.438 144.756 268.32 cv144.756 268.32 138.605 278.425 143.878 286.771 cv143.878 286.771 138.988 297.969 145.58 308.958 cv145.58 308.958 148.712 294.677 151.787 292.042 cv151.787 292.042 157.938 295.117 166.723 293.363 cv166.723 293.363 168.923 298.632 172.873 301.708 cv172.873 301.708 175.016 316.423 182.051 319.065 cv182.051 319.065 180.784 307.88 182.101 304.786 cv182.101 304.784 194.37 302.671 197.485 295.996 cv200.553 289.405 201.873 283.257 201.873 283.257 cv213.298 276.224 ln214.174 278.425 215.05 281.061 217.249 281.494 cv217.249 281.494 215.003 290.063 212.367 293.14 cv212.367 293.14 217.693 295.996 224.722 281.494 cv224.722 281.494 231.751 282.815 231.751 263.485 cv231.751 263.485 240.54 266.561 242.292 249.425 cv242.292 249.425 256.351 253.822 251.081 229.659 cv251.081 229.659 264.014 230.406 268.221 221.309 cv273.491 209.888 271.292 201.539 271.292 201.539 cv271.292 201.539 257.228 201.979 253.271 198.463 cv249.328 194.951 246.249 193.633 248 183.094 cv248 183.094 286.254 194.731 309.952 187.042 cv309.952 187.042 317.86 202.421 319.612 210.325 cv321.377 218.234 320.933 222.626 320.933 222.626 cv319.612 224.384 315.661 225.267 309.509 229.659 cv303.361 234.051 293.643 242.617 301.11 253.604 cv301.11 253.604 298.468 264.148 307.695 272.492 cv307.695 272.492 308.194 261.728 309.509 257.335 cv309.509 257.335 313.465 256.893 314.778 256.455 cv314.778 256.455 316.483 260.629 318.249 261.947 cv318.249 261.947 315.606 267.656 326.149 278.642 cv326.149 278.642 324.888 265.244 326.203 262.604 cv326.203 262.604 338.065 263.485 340.267 250.747 cv347.242 251.845 ln347.242 251.845 357.777 257.555 363.493 247.892 cv363.493 247.892 356.463 247.013 354.267 245.696 cv354.267 245.696 360.913 238.005 349.926 221.309 cv353.884 218.234 ln353.884 218.234 359.981 224.606 361.734 228.121 cv361.734 228.121 364.369 221.087 359.101 213.185 cv359.101 213.185 360.913 205.492 354.321 199.788 cv347.73 194.071 344.213 193.195 344.213 193.195 cv344.213 193.191 347.323 183.311 342.021 181.772 cv342.021 181.772 353.884 173.862 339.387 165.077 cv339.387 165.077 345.978 161.12 345.101 152.777 cv344.213 144.426 342.458 141.35 342.458 141.35 cv342.458 141.35 331.919 146.623 324.007 146.623 cv316.095 146.623 294.134 149.26 293.259 133.883 cv293.259 133.883 307.749 135.642 318.298 135.642 cv328.838 135.642 356.518 137.838 365.746 117.63 cvcp87.1494 67.3276 mo80.5615 67.3276 78.8057 65.5669 77.4844 63.812 cv76.1665 63.3701 ln76.1665 63.3701 80.999 64.2534 82.7578 64.2534 cv84.5181 64.2534 92.8613 64.2534 96.814 64.2534 cv100.771 64.2534 102.964 66.0093 103.405 67.3276 cv103.405 67.3276 93.7412 67.3276 87.1494 67.3276 cvcp149.978 77.8716 mo160.156 84.6582 161.836 88.8506 164.471 92.3687 cv167.109 95.8838 160.959 102.038 160.959 102.038 cv158.759 94.1255 150.854 87.9741 149.097 85.7769 cv147.338 83.584 144.263 85.3423 146.02 86.6558 cv147.78 87.9741 152.609 100.716 156.124 110.822 cv159.642 120.925 152.609 122.243 152.609 122.243 cv151.292 107.747 140.75 98.0801 137.671 95.0044 cv134.597 91.9331 134.158 95.4424 135.478 97.6382 cv136.794 99.8354 143.386 108.622 145.141 126.198 cv146.898 143.77 138.111 142.894 138.111 142.894 cv140.307 124.002 128.885 112.577 126.691 109.94 cv124.494 107.304 122.736 111.698 124.933 113.457 cv128.816 116.562 131.962 132.345 130.203 149.483 cv128.444 166.61 120.541 162.223 117.906 156.949 cv115.267 151.679 113.07 139.816 113.509 137.178 cv113.95 134.544 112.632 129.711 111.315 131.907 cv109.997 134.104 107.045 147.524 109.556 156.949 cv113.125 170.348 107.358 161.783 104.285 158.267 cv101.208 154.75 98.1348 142.011 97.6934 138.936 cv97.2559 135.861 93.7412 131.907 93.3022 134.104 cv92.8613 136.302 91.876 147.774 95.9385 156.508 cv108.29 183.094 93.7412 165.734 88.4702 159.584 cv83.1992 153.434 79.2407 141.132 79.2407 141.132 cv77.9253 145.087 77.9253 155.631 77.9253 155.631 cv67.8188 164.858 67.3813 160.025 65.6221 157.389 cv63.8691 154.75 64.7471 149.923 64.7471 149.923 cv45.8516 150.799 52.4429 131.469 52.4429 131.469 cv35.7485 132.345 40.5811 116.531 40.5811 116.531 cv31.3569 106.426 35.7485 99.396 38.3862 93.6865 cv41.0215 87.9741 37.0659 83.1421 35.7485 78.7505 cv34.4307 74.3574 36.1899 72.5967 37.5078 68.645 cv37.5078 68.645 41.4575 71.7217 44.0986 76.5537 cv46.7334 81.3833 43.2158 88.8506 42.7808 91.9331 cv42.3394 95.0044 43.6577 99.396 45.8516 102.472 cv48.0518 105.547 69.5786 120.048 75.7261 121.806 cv75.7261 121.806 75.2876 130.594 78.8057 134.104 cv79.1157 134.418 83.1992 122.243 84.9512 118.724 cv86.7104 115.213 102.088 98.959 106.92 92.3687 cv111.752 85.7769 117.024 97.2007 117.024 97.2007 cv119.218 76.5537 108.238 79.188 104.285 79.188 cv100.329 79.188 93.7412 83.1421 93.7412 83.1421 cv90.2261 79.188 92.478 75.894 94.2334 73.2568 cv94.2334 73.2568 105.219 72.8179 108.29 72.8179 cv111.369 72.8179 111.807 72.3779 111.807 70.1851 cv111.807 67.9844 107.854 61.8384 106.096 59.6401 cv104.337 57.4399 99.9434 59.2349 92.9155 58.3223 cv82.8135 57.0044 81.4404 41.4058 81.4404 41.4058 cv84.0752 41.8477 88.0327 41.4058 92.4229 38.7705 cv96.814 36.1353 99.0112 29.9854 104.285 26.4688 cv109.556 22.9517 121.417 22.0767 130.203 21.6377 cv138.988 21.1973 140.75 15.0498 142.945 11.0933 cv142.945 11.0933 150.854 14.6084 151.292 23.3936 cv151.991 37.4341 139.429 32.6187 139.429 32.6187 cv140.307 42.2822 150.415 39.2114 150.415 39.2114 cv155.248 60.7363 135.035 60.2988 130.645 61.1772 cv126.249 62.0571 130.203 66.8882 132.841 67.3276 cv151.125 70.3726 157.007 56.7822 157.007 56.7822 cv160.625 60.4033 157.442 64.2534 157.442 64.2534 cv158.759 64.6909 160.959 69.0864 160.959 69.0864 cv158.318 68.2075 153.488 67.3276 151.73 67.7656 cv149.978 68.2075 149.097 70.8447 151.73 70.8447 cv164.593 70.8447 167.109 82.7036 167.109 82.7036 cv164.471 79.6265 155.248 77.4297 152.171 76.1128 cv149.097 74.7988 148.656 76.9917 149.978 77.8716 cvcp126.691 36.1353 mo115.699 47.1235 104.723 42.7231 103.405 40.5283 cv103.405 31.3022 ln107.358 33.939 109.997 34.3794 112.632 34.3794 cv115.267 34.3794 122.297 34.3794 122.297 34.3794 cv122.297 34.3794 128.009 34.8203 126.691 36.1353 cvcp19.4946 17.6851 mo20.3726 10.6519 21.5249 10.8774 30.751 7.79785 cv39.9785 4.72461 45.4702 6.91895 51.1826 9.11865 cv56.8921 11.312 66.1191 10.2139 70.9502 8.4585 cv75.7837 6.70068 79.5596 7.15283 82.1523 7.79785 cv87.4253 9.11865 91.3789 7.79785 94.0146 7.79785 cv94.0146 7.79785 90.061 11.7539 86.1611 11.0933 cv81.3149 10.2744 78.415 16.144 76.6626 19.2207 cv74.9043 22.2959 72.8281 23.896 65.6772 24.0503 cv55.7896 24.269 55.355 31.7432 54.4785 34.8203 cv53.5952 37.8906 50.0352 39.4639 43.9307 38.1099 cv32.0698 35.4746 26.5215 32.1782 23.8872 30.4229 cv21.251 28.6646 18.9746 21.8198 19.4946 17.6851 cvcp196.604 159.365 mo196.604 159.365 199.238 158.047 211.539 158.047 cv211.539 158.047 223.48 172.983 240.54 180.015 cv240.54 180.015 232.628 207.688 265.579 207.254 cv265.579 207.254 265.525 228.121 243.997 223.73 cv243.997 223.73 245.755 233.833 245.755 238.224 cv245.755 242.617 245.763 248.339 236.091 238.666 cv234.77 237.345 232.835 240.063 233.894 242.176 cv236.529 247.451 237.211 263.947 227.303 254.039 cv225.982 252.721 224.059 253.197 224.667 255.797 cv229.062 274.69 221.068 280.605 217.193 268.98 cv216.316 266.342 215.441 266.781 213.675 268.097 cv211.923 269.416 195.234 280.398 195.234 280.398 cv196.986 290.063 187.761 299.291 181.587 297.313 cv173.341 294.677 169.831 291.655 175.898 279.521 cv177.22 276.883 173.707 274.665 172.38 278.201 cv169.745 285.236 159.751 292.975 149.534 280.398 cv143.824 273.372 157.442 267.656 157.442 267.656 cv160.518 266.781 161.398 264.148 157.442 264.148 cv153.488 264.148 143.386 263.705 144.701 258.872 cv146.355 252.803 153.488 253.163 158.759 253.163 cv164.034 253.163 178.534 255.359 189.519 267.656 cv189.519 267.656 200.699 261.293 205.336 256.234 cv210.164 250.966 217.193 247.013 218.075 221.97 cv218.496 210.106 208.004 200.221 201.82 190.779 cv195.642 181.333 192.215 173.862 196.604 159.365 cvcp164.91 112.577 mo211.923 112.14 218.52 110.822 237.844 107.747 cv252.22 105.456 270.521 113.056 280.075 124.656 cv286.223 132.126 286.722 143.7 294.074 148.602 cv304.62 155.631 325.709 155.189 338.893 149.923 cv338.893 149.923 342.409 163.1 325.709 163.1 cv323.074 163.1 325.516 166.769 328.79 167.493 cv340.646 170.129 347.68 180.231 326.149 177.162 cv326.149 177.162 322.837 180.86 327.9 182.427 cv346.354 188.14 336.689 192.973 332.746 192.973 cv329.228 197.806 345.479 196.05 350.755 207.47 cv354.771 216.187 331.419 218.019 336.689 220.654 cv343.287 221.97 345.917 227.242 348.551 232.515 cv349.872 236.469 348.996 243.497 343.725 244.375 cv339.037 245.157 338.017 237.783 336.689 240.42 cv335.375 243.059 335.375 245.696 334.062 249.646 cv331.419 253.604 326.149 256.234 322.192 254.919 cv318.249 252.287 319.562 245.696 320.878 241.742 cv312.966 241.742 315.606 253.604 307.695 249.646 cv306.381 248.326 303.739 245.696 305.065 243.059 cv309.022 235.15 321.589 233.869 326.149 227.683 cv332.301 219.333 320.878 193.852 314.292 179.355 cv314.292 179.355 293.89 186.527 268.159 181.114 cv237.903 174.741 220.76 163.757 214.174 144.868 cv209.451 131.323 191.715 136.302 191.715 136.302 cv199.628 137.62 206.652 140.695 208.848 149.483 cv209.171 150.761 208.848 152.117 207.528 152.117 cv198.307 153.434 194.357 152.995 184.242 145.963 cv175.016 164.417 156.976 181.333 129.768 177.162 cv127.163 176.76 118.782 186.823 121.859 186.381 cv127.236 185.612 132.399 185.064 136.354 189.019 cv138.988 191.656 138.956 196.911 137.671 199.564 cv131.524 212.302 115.706 207.911 113.95 195.61 cv113.95 195.61 111.315 195.61 109.997 195.61 cv109.997 203.518 112.19 216.697 101.652 216.697 cv96.3765 216.697 98.1348 206.153 92.8613 204.835 cv92.8613 211.427 90.2261 222.408 82.3169 221.087 cv79.6812 221.087 78.3638 215.378 78.3638 211.427 cv77.0469 211.427 77.0469 211.427 75.7261 211.427 cv75.7261 216.697 74.4116 223.289 70.4551 225.924 cv65.1875 228.559 63.8691 221.97 59.9102 219.333 cv54.6431 227.242 47.1724 242.617 39.2627 239.107 cv30.499 235.207 40.1431 224.606 44.0986 219.333 cv44.0986 218.019 42.7808 216.697 42.7808 216.697 cv37.5078 219.333 34.7202 225.333 29.5986 222.408 cv20.3726 217.139 23.4507 206.593 33.9946 199.564 cv31.3569 196.926 29.5986 195.173 30.9189 192.539 cv32.2329 189.899 37.5078 188.582 40.1431 189.899 cv48.0518 193.852 50.2456 200.443 51.5664 209.226 cv76.6084 205.277 99.4521 187.264 117.906 170.569 cv117.906 170.569 131.962 173.202 136.354 154.75 cv136.354 154.75 153.05 152.995 153.488 131.027 cv153.488 131.027 164.91 128.394 164.471 115.651 cv164.425 114.336 164.91 112.577 164.91 112.577 cvcp251.47 75.6738 mo259.371 71.7217 265.963 66.8882 277.386 69.0864 cv275.634 74.7988 274.306 74.3574 274.306 74.3574 cv282.218 71.7217 295.401 66.8882 304.62 69.0864 cv302.424 74.7988 ln311.65 70.8447 320.878 64.2534 331.419 67.7656 cv329.277 74.3574 ln341.802 71.064 356.955 77.6528 356.955 77.6528 cv353.67 84.9004 353.67 84.9004 353.67 84.9004 cv352.605 85.6914 362.892 90.1685 361.57 107.304 cv360.656 119.149 353.829 125.757 344.601 127.075 cv324.833 131.027 313.465 131.247 291.501 126.417 cv289.681 126.017 288.426 120.703 288.426 120.703 cv308.194 124.656 327.024 127.952 345.479 120.048 cv352.068 117.414 353.829 107.304 351.199 100.716 cv348.551 96.7593 339.379 89.6958 333.889 87.5361 cv312.149 78.9697 264.032 87.9741 229.772 85.3423 cv211.32 82.7036 204.015 84.9004 189.519 71.7217 cv180.292 62.4951 179.855 47.1182 186.446 36.5728 cv193.03 27.3511 204.782 23.9321 215.276 24.9292 cv242.95 27.5659 250.715 12.6328 274.585 8.4585 cv309.729 2.30859 315.224 17.9038 310.337 13.7314 cv310.337 13.7314 296.946 8.99023 275.634 17.2432 cv268.761 19.9033 261.403 22.2959 256.132 26.2485 cv268.646 29.5435 269.778 32.1782 283.143 33.4976 cv314.341 36.5728 322.192 22.9517 338.017 26.9097 cv338.017 26.9097 327.962 30.2466 329.277 30.2075 cv342.458 29.7666 345.917 30.8608 355.142 36.1353 cv356.463 37.4492 357.777 40.0884 357.777 40.0884 cv309.022 27.3511 313.661 48.5356 287.755 49.9727 cv271.952 50.854 249.099 36.793 242.95 38.1099 cv242.95 38.1099 240.979 59.8589 224.667 54.5864 cv231.088 49.314 229.116 40.749 220.76 38.1099 cv215.586 36.4761 208.848 37.4492 203.578 38.7705 cv194.357 41.4058 190.84 54.5864 196.11 62.4951 cv204.015 74.3574 212.641 76.3345 234.332 76.5537 cv234.332 76.5537 247.509 67.7656 252.779 70.4033 cv252.779 71.7217 250.288 76.2651 251.47 75.6738 cvcp315.224 23.6162 mo315.224 23.6162 299.406 32.8389 269.533 24.9292 cv269.533 24.9292 291.501 17.0244 300.938 17.9038 cv304.907 18.2686 312.589 20.3179 315.224 23.6162 cvcp8.07422 72.5967 mo8.07422 72.5967 ln9.83105 73.9155 16.8594 77.8716 19.0566 78.7505 cv19.0566 78.7505 22.5688 86.2178 18.1768 86.6558 cv8.9502 81.8242 ln3.68018 77.4297 5.43555 74.3574 8.07422 72.5967 cvcp10.7065 65.1284 mo10.2686 62.936 10.2686 59.8589 12.9067 58.1001 cv15.5415 56.3447 19.0566 57.2231 21.6919 62.936 cv23.2739 66.3647 22.1299 68.2075 19.4946 69.521 cv10.7065 65.1284 lncp6.31445 88.4165 mo6.31445 88.4165 15.5415 94.1255 16.4189 95.4424 cv17.2979 96.7593 16.4189 101.155 14.2251 100.277 cv12.0269 99.396 9.83105 95.4424 7.63232 93.6865 cv4.10352 90.8589 6.31445 88.4165 6.31445 88.4165 cvcp25.9873 102.751 mo14.6602 160.905 ln13.3423 166.61 12.0269 167.051 12.4648 160.463 cv12.6641 157.489 14.7402 132.341 16.959 105.632 cv18.5005 105.421 20.0488 104.756 21.251 103.351 cv21.251 103.351 22.4536 104.543 25.9873 102.751 cvcp28.4463 90.127 mo26.105 102.147 ln22.5688 99.396 ln23.0107 98.0801 20.4268 92.5874 20.4268 92.5874 cv23.5029 91.7114 24.3818 89.5142 24.3818 89.5142 cv24.3818 89.5142 26.5083 90.1938 28.4463 90.127 cvcp32.73 64.0308 mo32.73 64.0308 31.5254 65.7778 30.5928 68.3018 cv29.4136 66.5103 27.8389 64.6909 27.8389 64.6909 cv27.8389 64.6909 27.8389 60.7363 25.2036 57.2231 cv24.374 56.1167 22.9404 54.9893 21.2563 54.0449 cv22.0537 44.4956 22.5688 38.3325 22.5688 38.3325 cv25.2036 40.0884 33.5547 43.1646 37.5078 43.6069 cv34.5547 58.769 ln33.3911 57.9214 31.7383 57.4468 28.7212 57.6621 cv28.7212 57.6621 31.8467 61.3955 32.73 64.0308 cvcp29.6519 75.4595 mo29.853 76.7632 30.1938 77.9966 30.5762 79.1948 cv28.9482 87.5513 ln25.6968 84.6782 ln25.2622 81.1636 21.3027 74.1382 21.3027 74.1382 cv23.061 71.5015 25.6968 71.064 25.6968 71.064 cv25.6968 71.064 27.7388 71.7075 29.6816 71.8091 cv29.5078 72.9883 29.4624 74.2222 29.6519 75.4595 cvtrue op0 0 0 1 cmykfgrestoregrestoreAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailerAdobe_AGM_Core/page_trailer get exec%%TrailerAdobe_AGM_Core/doc_trailer get exec%%EOFgsave userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse grestore showpage%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 9.0%%AI8_CreatorVersion: 9.0%%For: (User ) (Tasmanian Media Management)%%Title: (Utas_vert\(M\).EPS)%%CreationDate: 19/2/04 16:37%AI9_DataStream%Gat=qCNCK9Q)9$ss+gTJ#g'\njo(p1q&n)F)6G?G/(n/`*"r[hfp8iE!Xo'^L\'j+I83gS2$h@u:+/X6=]p#1H*6Tr=o@?EYA`9'%^V7A[l0Fi=r,Q0!hNt`Jg$MFG]2(Wd\'+59G9:oePZk0G+nXL_.J6'0<A.<7WBkJ$qW@S@c0>*(`U1q?FEdKGk3D+&m`YR\<u8pW%3.(S@]=2^^/l/Z.`Qc#!p&&k1<c?came:)%^A7Bba/d\,kplW+eMhdB%q4r!mf3'TMiI\[Ru<n6l;lCdI^Iig='+kYmVacHDf1p#%52PaQp[cX:pYk'(m3>EqI_L=B)F=7%+,ur0If.IPe`f"O[r3nep\A36ENJI:G?WUbHi&(FIrg%NHM@:.6BjIC[Un@dT`/Uhs)>Qa%fD)(mfBghtIJ)?9$EA7En'aLLJ,8EXp2bM#rU6AXZSk&1r8I;A@^KpXn]Ib+k1?NG>eI\[+,efj^%C@`B7&D"GAh3*Z^8hkl$mT=%d*8P<dk?d^o?k28pRcdOjMd$a1I1I'X>hr`53TcO]79B0s*`#k+OBLPDr+f+gn0PSU+;#3O$3+/p@H^21q-e`\#)AuT1[h(eAfss%!Da5mVn[\ks7YGsH$t0`p[]NUMp(-?]!$#?J%5D0SPdSu&::MU>fraqm`4qfhd)djs)<C35L/>jDu(=/gRHfmX"X3UNq/[?$dR"f%mF(tT*I`KXqpXdN5/2CKNA[>4*rYN_S*(UV:Uf']hn;0Ys8M/WXo%_Fp=6Q<n"RGnhL"GW^,-G3fQgGbatfS0eJOT<(h+Mtl>U'c%`P/str9<eKbCs]N3:Y$*(N3*Yhk,r'?[a%RAF]Pu)>*Okr*(a[01B[2IieGMqSBW?H@,I6j4YFFD>[sl5I@a]IJkr[.=0h-T<8Es%s3(*$B/a`g0M0/0?]2Cs`V<Ln5E0=IB7$B;hRsr![,6B2h2QaHFL?kZn!5>Ilb*2fci<\HI6<'"mb_AC-GT?Cp!$jIm?dd<]2/I6%8C,&#[f>?2(N3(Gs1/$dLJ.1&C$jpRhsFHfrX\u"rGH2#hsND2s5SJ)o"Xh7s&INTpM'Zpr_NR^p93$Ca7"3lh]H4o^3FXk`U3\>%\,SeDlMn:Xm:]_\hqd=NM^t@@aVOF+cb!O^*%^>lpS@K$nSBkN55T!%s&OVUl-F;Jfpt;":EOpB3kY66/ok7@s3D!6f5f0Yre(L,%iP0H`mDg#En+>gNDf=LGrT<r02nMj[\aQ.r>[:Y7FF3QOkKDoble?W-5OX)OF*%$-rg07<OjrEXhYioW^-Da;YJ8Oph>dDX)4(gT%:*pVO_fMdF09<jWo\USaLSM!?@j=3e1e7Se)h3o8>56Y4qXrYaHMk@6q>BelD>`a=0Z:h8X'ter`VmdDP97PAJ!U<0gZ9"R\@?s*%^R(I#hLG'T*m961rPe1&T5Q?"?gj%f6iI#Xo_LACJq'HV:Ud7Nofq+'cWBR1UMC>gZsW5>[KZTbSnAH+]7%-lpg<AGSqjZ8;BOM7%ng[Dda7l%jo(DuWQ?Dh@q_,\7Boe9mYr6q'k1u:OSC&WDFo))ZZ#oj1h>Q)Pp\XD4m_gfGs#"&Hc%%FibE(NUp*?g;gM`T8GVMKn%Oo></GB%bNs*jtfLNE+c-Up;VgqGtc[bi/]LTJ;9rM.DoG'JGA^Nhfp^4c[`Qe.taS$t>#QhMSql=<.9CSK)Hf`F@-A2=CMq%t@P%Tij4i58F4`O5MYSn3bJX31?K>H2":\hYYXmc`c$%[(lp@Yk@eNL\k:HVU_^d`pg<WD*Q/oI.\"S]:KM;q7-I;emA&gG+\d%Zi.(>%CWij*`o,sB3M/M!4.@=7DFqQ?B^nog*1=5-o@dAsg?_`te<p(;,L>LB,PrGj+k6EukI(-URU&(PSBH\'?CN%?q2dsO[]C=Gd(Zl#%fc_GH%/]4K2A1F!U`KS#g$ek;K5S(=EclAF>CW:$P4K:33eg"[V5n)UTq&Tn?$e^oX`'i3a!6'i)a9<G,dkiNIBA9nlJ1FN0PI_7%9IUueE0G84pW)+fri<M@rY82K3jl0UcpA/abB[lJ^,E'$lLXD>O#1^WrFP_@pT&LWnlrAMikuD&U7SON!BPOn&#oB,8Rj"^`H"^n%E)M'?)kpf[Uj8!4[41BPaW=B-h[`#.o[,QK7F=ZKO4ntC\?>@MLl)=?h8;n!Mjn-V40.%T'N]I_;Y"J6'\Uu,BVm2c`4Rrq0ou%N%>>*H@U09XS&(\HOKpWCYBI-_aP=pZ<EICj.?;oP`ootn8;>XFEJD;=06]jM"6SDpC$7!hShu07u^s"@;jcD^\2W*$l'e,HgmQ]-C%[Zf(FKDq"!ZhL&om:rdc(3dhkV_crrAeu1SL6`PG#'VKD%ZDP@kZL4AH!@>)R(\!VQWam%ejjRS#N'o%kGsQh*E&j/;-T"bk8qD7%A9f`^msi$/6#7j18MX6=#Z(pBL(]6(F=E(s;E`PH[->GR;1]i/gZVLM&e?",[(48$f/Ckm_BFiop85J3X],*</?7*M[h*T5(2ITW%_L?M,%\;NYX,Frq'U+j5Gk%m&K>hcliO$"gGhIc'GK'1_/FB*]jn>4P8SK2m)2o84=Ob02rM>g)n7YV"V\PbgbY`>B3@P<[Xf!N.%_24s_C`sO>kTN:RI]1r#62Vb`r;F,uU84.0hn$`Ql&_p/\i]Ofb#sX9Q\q`Ef4LLS.Ml3[8Q;*.,V_RWorP"P6PH;4fk[&mRi"<^%G,X%AJ<]%]4:sqBC0Leh\Uuf4c8nCn"1S^s1J(A6gE4Wfp"BJN8c'2[(M(0W.p*To$os]rA>]IH"G`;]YXh(m-eJL5Y@24o:hYoU%ce<ns@c7Hc1_Rj8[7F=ZdqQ_+/]ke>&Re*SK@HQrBf;VIS"'Zu^,0P)+#j<VE48bLR,f\H/Lp&s]+/TKa8Z7j+\uG<$&b"Og=\PE%Ikn@+N<DgHp4sNL88t\U+A9hSS7%)#O@k?+/E2P-H2h[l[5<l.]gsn0>!tBt02$pVa,8uV<#q4sI)t-O^%AhCfBIpHGT0;);KMqU%94o#6=X5X,/RkheFL!(+`YahS!*Jr0LnZlDaqTQt2,7ss))6LkU794LMG&PhM]\CTiMDd2*4W)Pdn*SFX:sncVN;R\=P_M#gu+_#%.l"Gr#ND]T'Zm*#NQ=P7L#*%pfWTbOn`gsKW+<Lj?)2q2)V*p!Q6euLJ/au2]p<P?WC7a:np=!j4]s)Wkf4^tUPh<=$E<,U<TQ7[%8h;Zi"M9O(ZUJehe)Y2mXUUg9iUnb$PJCTg,lc,'a-nn$H`JC+9e@!%m;ppC.W$b@aZ&ENI;04[%6`!>520paCF@gaqS%e>i$\6\%p"k<0KNJV!RnK#AF'=c<Ws1Y*Fmkle12qT^llf$*0fg@R9=?6)eJt.ump*g>2);V#587e8;@YK])K_usfG$@4@_Q/b+=B4>$8U`]%"@2j-'+F,(QT]/b6)7Z6,0e1OMis#-e!;*VL)146>BC+:7/c`n=EBZqX`1akUQ80&'0D$EV-27)&uk%]/!BCg41'ueTdJ;dVHIGQ%i7*@elNN;9#$_]cb0$AS"AF8T2ajhV8Q(\>&-6a7jnai[.,ujG<3UBl%rt<3X$t="N.WQ.R0>5JeV%3L=b(YA<]Xr\J:3tN=AV-9%Hq0`dB%DMJBb`XZl6UG69$ulqX%2c/'K:[HTd1b_-0&naVAmJ&WCg*f(ItE<-9#cdA^RoSc'+HW60)_?YEbtj+]"Nq+\.bGp./*>%ZD`ltm^Cd9AMZ?@SVT2"_jokpQ7U>;j,Z0FV.qH3:jPnbl'b"=`_N\I2f<UQ."5sZ5'pZ[:=^;l8?#T?HBt&fV,6O2K25[$(o\87%8_HA.8+CRW-TV_i;nO>rV)AoO)Hj`jJG6\qkF(s0`nX?YIb\e@iY[RW=3JIg3qJb^#d%,HfSc+ff[P?8Ou></GhUtaN#/4YUeD+i%IYAZOQrnmk2O`OUJH(bL[=sf"_gBs+SuNc8/P0/=V:YYrZ%3=lP>@I_dTm&X]u4IVR.ClbC8H&_@gP1P77?6R/3WQ(T#+.lKVMSQ%.==uc7.bV#^@^F*Ct_.]).>kI9N8MY,*!h@^EJQs^Ne.rO@SG1kLnOR"I*4d/]l5HmW'uSZ_ckF4J(6Dm]6l^d>;%3,%W*`.Dod,%@K;`71+OZ77>5A9Mh@JjL$"`6,H_I'%FS#.=sEjmkjj+)9\/8mjZS`$<Kpn^W3PIYTs&DYk5l>g8b:%>F;&MJ=g/aLP`GN33K)^h%p,$4u@U-NbVoQ/fFL%-6P96\FXY(<RI8FUME(DIhO`?"Oo#?SVHUCM=]NIq6a,FUTh9sDXJ-6@#dh*WA0bcDJ8rW2W/dg+T)Y-%f%!,9MkdF<>;O'Z&_1+gc%?1AH]#e\E7RjS-fDB!s\?=#7O_SJEaMO+[]jWDTM1!cU12EY>NI@:DqE6Dtj#$!QQ'8e"kW*4/X>dF,_%U+g:qU*r[MSLO=Oba`eO*iFh(-];nS8e[thj5B4"n[=&^[j@St7*DpgbdphDjiNMbY"^V`2egBFkfte=>h1S=E)fR&pr%^Rl\^fj%VaPW_j4KP`dnA*1S.%9KE=3.S,Xa>LK=S:\H_Oic(Q]'HTe52Nj,E+-FF`rS"3qc*B<*4$K?MNg?6HumcJI#.c:rp=+H44#MenDM%`LB&I_a]2XoOQ7=W%&%AmGd?QXVcMAM1ThgaaW`?e749$RP)"$7_kX+.o8:c[&o@RQT?u3MB=!'ASZlm?tNR8*2>/&Q"j1cK366(%BacU9Tr1SR<1Zk?j?j8^p]qY/EpBAk7b/:cFQo;ie1fQ2,\Q*rXDp.<W;&STm[H\-X;`F`h25DTdU+[.D,W>[7qBg+@`q=4U.I+0%7]'WK1S@0ZNYWa/Md*hP-8#VUVATY83>'qje6=_"_#UUr[tlEu[:]D.2s3Z5%+@4'n7K?hG1koJiqX=1@)f2+q;k!tOX3%"1pN:$%A1\1d-=,p']s.Q:)=U^cB7mBKBmNjN96TFECIfVK)]f$\Q>&hPD6rdpqSpn+T#fU&RBlHS,u&qS;.M+JQ==naR+DsnKI&3fgU]6_%^6D.BB'ZM`L]mqqPPUM^D18!!EE7m4-G5sg>f3ca/&cM\5Qo_lCk4jh9-ofn@JJP^!<h>Ue"QZd_FtkL6-HL%R!"-P1N#s1"+!YY%4\m%#E-B%5>$^Y&F7lkAle/FmAq[M+W\"_MN&G&20[(D_/cf`3b$K+fM7i'f$h5:*4A[#Nir[XV&N%!C_\Io42pcdY_H@QuTCi7`%,q/plXRpmU_A]-)<e:uI8*!dr/NHFL.1GA"Qm?I7gn]?jf1Rdu$@&L</k/1*0u>lBE0o4g*!Ge7m\X'd7smIN&Y"Op&47n%X\GQL%=AI8#6skL<&*%Ig#^7M>LEDVbB?#"dJ.f48bZq\4JT38b8hZ'u=h9VP(A+W.;SkNG_,^iL.WIJ;U7a;F"WJT.Us1(rFPjkZW^UHL%Q-Zmjc,9V('#?Z/`*iiM?0+._2MkoQ5+%-p,%(#+4]UF8_%WuPQp_W.9P@!,p6<KeEh%m;?f[R$?0pEamW)FhNbApc2#Q+ldXA!%%$.VA/9#,V]&T\ja&+2-BMBl-M[*-\o,bR^O#n`^6!,sRT#F?RW9"d1qk`t:<<?N31`R6A6b>Sd,%<G9-;'j0!JMdJY`a^"SC&#k\%/9<k8).N2R9jK$lE1P0Figmn[EJaGR1u#kQk[@NPg&u;m&6HQ`jWP2^@N;Z7SbQ*PQ9Eb2$[j;EE^]O<$(!9YC]k?sdGa1Y8\QHW%<kYR9+VGWXm$jB9g$]^=fMoYC5_/!kH(q:b7KdP1*K.)<TpOAhqA"\iI@<H^!(<tnYD$_r'"(AkOVEG;Lm+UhG'\F%>B\#l9r@]^%N'3a?8:dT;e4U/"NNq3Q'0%9EIG]>[s2I/[Bj<BV=<\7u-$D6*#a+_?3SV*6B9p8q4&?A:ZqSAYA,6=q'+NgK%ji2s(3Z&Gc?7Qi%4rU*!3%l0W7,!7+kbFOs9AhO"!timdn3I(+=G&mVg?_)K3@`X=oth<DkB*>665!^r)e8+4/8Cn\l+!u$gT5sf2]Kmd3L2oQeP]o&%"\T>Nn.aMFmPh-n"T6r[E?3E(UjV:J4>IT_#RIRlDtr"'#(?dL!b4gVM![&-Wi$<?$Y@F*U667X6K18p>g-jGLc6'W8anLLCBJQY%h\5[p@eU&b(c/<-6Y]$0_fk<sE0tcFjKI-sJcJeTcp1107*[[-#L+\"IOb+gU`4]F&5B#_>*;=mdQuA:>[,*JO:B/X,78"QnsbTA%F#.TD:pR1'3aj>2hEdXmfVXYW7<L>I"S$:pLcgbqfa39G86hWZQ'3mWfZu*'XKWUBQ#)s4M*"98^d8n5b=darV,P!7YMPVPaHdV>%"a)S2*F&r,(6!g.(NHkCg]osb:d?t4:oOu,Sto)8rO%@I$kT0I.Ys$VKtq(IQiOENAq6;P%dY<-_K^om/PqU61t<5Y>NA=Mfg+^,%,Y6t4UB<F$<916Mb9;;l<OQfY;8%q11>]\aW<aSV\6>A$4?ej(Dn9LA.DLD[ed3T-A@)AH_nqJgA?c3W/%V&Rc#MB<,oRV4@'0tY%,fc'(+`HieGcKhcBP'TO&dPBDYrOh[0I")"n@lDN+H",JZ\'%1(i&RX;)*fO'uD?6U]Ha&4R8AoHC<+uXF.jJk<bs1OMRW3XHu";%k"FD>.qa+VCr&VoYk17j?ntb0,C=&.J/SiN(id8Be:@k6S/36gF]]P0Tq`E<%$VU_bTaKPStbg%>m=\LEcK@"^$9]u68i0X$T.S"%-LB$j!HD/\<^iNnC4B:opTS3E/2`$5NTQkq[Wr8pK:BTqZQ7f0fS9,oT4&$@4EPWE(/BmcZQM5CYd>p-%4ld>WeV$56p"&"ZMQi`%nu8UqTD>@B#*24BCXUD!d)in.N'4_.8^X:Z@9g_p_&$N.0nXj-@h.`i)c]/VM"=_Y@"5Qo5?'86m%ni[@fkpAO',dm^/H\bXXmo'%[KKiRr%+cXL201]-.C+BA/)`AcTpLKV<-c-1.'R-l6)akSHP_>k\N_*3fr2RBNXP::CaU_1A$_QDW('nBM1D':^u`eR+]Kb4hf\o%iQ98HYI;7JO=Q9-A-.RrbWQ![>8(e<M.8oEC`T[R0>0$G*/fVGIR6MDPZA3!@<c62P)Amp.5:C@2*n$%7lGMOG^:s1E3dQ+bOu_<%41fXQ3H`4R^crUZlHP!B+qh^0A"k6^@!XB+76kLd)#bhq5&7P14M;5LKQ&5mcPbaKL?NIbOd2`X:ON")>;i21_R2ct6YH+'nd4Zr%m4M<MJ2C0:6Hog6S[?&sA51Mu161%`C;K4K,kQ%6r>JX0]UlXV_B1@M7I7Eq1)%KWBS7OEbC_NR71%5IBH@U5XbOW&j5:C[RF'6P%:<uTbP,XO#qD2/A^X!\6^5g.rCbq+9m#[*kBY*9B'JTo*WYRirN9pr-`VPgX;8X&VMd%-LA[;58_8a(fWgMrS#1pZ%T,BiIFJsr2%7I[A@UE0[XT70f\!'m;8/R-DN"`IT7GqZrboZ^MH.8[h-[:MU+nqH+,09Nai>F2ho_kX`qg&A?RE"'o[XkS1hKEmVe+@)7cPt#F>%;_+^o7Vi<e!U>3mQ1<K,@l6``gk82d!/8Ei)1ggV"b:-CFLpN?qT.][U64J&>TG$f.kn+/,Eo=,pa"%W)Mfm;PnFh-/p9mO/Q',(%3`9kPTOcYoLT%M7I/q-Hl!X>t*j!sehi65=D6OHjM:u)Z.7QE;.roZ@f;.JhkG+0T8hmWH8gBk>7?&35X0%&oP(GQ\#/jr7&dX6Z%-qXj/N^db>W(8<])(Tb81nBSMMUO!n,FSgVa%N<i1.^;I3u9o*L'J^C5u#l7"0%d?abU'ZP:XL\o.s5NS.!^0aDm+2nk'.-dQuJf%;f)Y#A1q/o<#42X>YK=N6oj\5dk&2*Y_UGjb<s;ORp02aUH?7j1;q#e,:hSA7*E54QB`Kn2tKFJY1d*&an0qm+A3p;#S;K0X3%/`%V[Y/0qCkJ_n!Vo?io1=?:<,L@-l76"SalIeD$3Y#9*3V&fTKjNO;.Ad9G1&BJOio`"\,OJ=.GJ#+7BBgJ>'/o['Cn[*Y-5BU9d`e%_4;a7/A)m-MK;_HRC=s6dp&28+'COV:sfn]+Tf`TYEB"lEG_kR/B!b#NuT1G9?eZ4DD_ppUk^$JoL!EXCdP:T3WK`cVMcaE`#,kK%$_,5AV#aR^N+ba%[3hQ]Mp>G5JpO_,M!I5?3$+'u3tYjdlPJS]_r/+9CZOJ7dKI!QR11DjK3B3<[8'/$PnrlHJ0cE8DFo8@BWK*'%Q5!(O%G``a=Jr7L[e,4&;mA-/$+H_nXG%p-)E=NTA*p:4a<rR"X&oMS-!Lg)!B#llp_iXB*,(+Q"I$9.;8S1,>CrYP#)_MM4GSt&%%Rf=3@p(m]E6FI'5nJN>%_)"-S9gA#;^mG0=l(oY6g!Q9UmM6DLppikB_p1M<KC2$C0pd:Eo9?+f;`Q.CoPrF:hjJf]I1.2'GQ\N%p*<4W=u&9W)3cM"%\uIDcmbJ@FI'4o1lA+jJ.6e&>'%!4.Kt\3T$;mVZUd6"9\NGb[0DO0Tk,@iX"$4AoZ@ubWD#dBVB.)s<f1Bi%UmEW.9@c>7OgFe56q&;o@TBRkGQ[7`n"lEj2fF(S:4!!oV.=keV2H]T3M3+GNk:(?$fnK")\79jMdYab0]h')?YiT&>cBT&Af/?G%M4n,D-lPpL+&+n/E3(j*8l;,;]$gf-C_[`%$4k*.eCeree1P8j8OI2jL]DZZ29'GM)FGZm3pX2"$S/j%1.\MdWO>PpZ>.t8nQNCH%?Lu#XB3QkaAnH9[s(ltbrL'_"ojYrNUVBj*S[Hu+HnTRZD+g-4UM%q@WpS"B,h"\%pX]!3d8o?k.9D2WEnZgTVFle&,k=G]f=30O%LC021#[8(c;W3j@c91>A90-.T;T$I/?V@KaE)"nYN:!^,bJ:Pa(Blpk^$[Hm9J+$T'*_6qTj/+h9PSOa9WY+D9WE8=/41ig)q:$@%!&/7;'bZP:l8[`LRSqmF("0%7/>cm_;,17&$T6jYFj5e#Kk"iGk@+(7mm*"k1G>!PLLA(t+Ju;DBo0\!kPdmPT#rsQTstY%p8sa$%(b$(978uG/RV?*Gi$lF!BND_P&=,X5F4K&t6#cgu_Iq[fSuuKCZhS)-^.6qIb\]3)M?(SZ[TF,'LFj:M'koR=ZdhoJ?kkCs9Y#K0%k<<_hUMP,FI+RB*<sI371*_FuHF:=(lD3UC%,l9)IRRj5+L11)ce#%@/5'W9qUp3g$gou'1jF!5RLZp)gsVFjG+0^0.3CP<49RE3%gallUX"Qs1%4X@*cINP]aYTlY\4Ee</,FW+=qHa3:?9:a$H3!X.c^^!"5H1G7kmu<=obaDNGo<>2DBP;)*DR+3ECWdHCc&0n?^=T%UW"j_9Fl$LSG@rH%?VQcgpKSHU6^o[;SsF?7`Yg=+e[hth,h'2L*Z>&on[O0*U'mU9/8:HP:U`i]u+$Ki;,\I-1e@FV(4]>,R&'c%j]!0N3B/K4CUS8H-'M9Wf1NElE\?%8=f6t';b?PdJ2C/f*RV@L_NGBuOcT&82i?dtT*`p1#]r+n/etuVr6t7;8fGB!jfp?;cd:qn%AhU6>'rF-?Y:W`UCG@1o6Ofu3<C794?h\GkWl'51*"XEoR6+Z["RE]sCosm-0j<,.LP(.3W@+pWd]A:EB"X+DOJ&,o*7,n5WgZ9?%&U'D#GRe:?_oO?4lpn<H/#,-rb,^SL02%F+<+6?h=qc'9Q`m8acDnu+d"_'*#(j#iJGCIs$Xt+4lI6arP&M/03@5si_rXaAqh,'4%:RRBh*SbK;NUh8@N,mW;!1*IuU5X[O23U82j[#Chm?N7413#65L_\^Rb'Y\<.DYRC]95;rktM$AD"e_#!,N^X>hUr/'9+5V+N\JT%f_%'.VC>,or[^:D[;^hN>ekWg$//QU+6]iC^te1\dK\QLZKImqZ8KbNBeCY2S!qm3HQYt)J4b.2YcVV6hSK9s$`>c:1(J&5c!^Q2%T\*oo;/H4kU0L<:60QDVJB)4*TQW$kiDR,@lodtUX=i9=MoL*dW&B0S.jq%k^*WhhY4HUfJQ,.GKLKb\5U<&$BtAl3I\8!%ODYs"%E9ia3p+U7LaCIjYcTIk)L'iXGk":>[+4J?dNViIi6cB&sR7A]*Z@MaB#\!lk,%3rX"o#&KSP:+^\Q/]Sn/Mc@W,mjO`<]LjSHa0J%ouQ;O?HH]b>QlnlO[2AHd4NB^$RE3_3#\1=>\2,&\#"J]b3;;3*>jiBlsQfaC,`=%0*)"6erH'cbI2oY4q`gT"#*UFpZ<e>[("F<%l(K\WbmBoR\$Q,k%0p;,ZiE-DoGY`7RTN.6QF7]/&06\I@$HE/[LT(i%4.PTa_ZM.@P?KklpYL_BF+e.;HTlGjL4GmUu]`\7nPt=%F(eOf_b+B2"5(.5_AsoEcn"4U\8IK:=%JrG=uDP4)c$PA,,np$RnuWN6f;-M,?[FB-#u9]:sRH:"L0G7V/Y=,PS3a02rr1qUS_S@%`LeWgj%#?)WPB3<,'lR]D`5V5bpkJcXkh@4!>A@8T".c]n\:i)*]+'D#S#8d_1TI+TmRc&*>'S*(W]#R,*Q#@3';]nEjMM%?7]r2%Y[+Yq;],8`Lu.Eqmg$<L#<SUhE]:8V<FW4Y"-\8@PcINoJjOl])0r^VYtX-Jp>4L)kjHKEkFG*1Vi\m+F@mPil=f_4icc*M-0N+L%1;5'VOGEqDqcVF+c9r@X9A,AaHk(9lC6(1u`PRpq@I)u=7f(G5hoZi53#)dF`0nG>.+OG(n:$aiflFIt_33aC,OQpH@MYJs-nE<3%ed8[6=W/t?\XR,$:qq[7j?fBu6E"n1K[QCJiRYuTOOkrg<^p`-gs)4s+dd5XQ)BR??5PU=gUL*!]1%(tBt4DC`=AT7k1,N]*P6M"%]dj82oEp3m8_+WgCe/FHHsj)i;e@o9]U-Wl+\"-Ap+fj<S/YP_L:(0"FH3t)K:)esdYb(l@%WEVnA2Jsq6guKKsfaH3GC>bF1u)^%;4D`=e7*Bq;94[?[OnbpY$ao4DX0.N:S#!uIC!\uPbXaC8!0]\2-1F[>$\:RFi[.o$pVG,AP(f9gP579qSMqcba*Wpj#YZEN*UlX%[EjpZpR^)p@_&6I7XYYE4*H%hdeM4m1Q)4UHB#lpEl.*?:9i[5UL(0W]Z^uoJC*FJ`deIRYrse:Q(FZr[>GF/`H\l26N`OWq^KJI%<3_"\g6F@LL,)gGcG=auF0=h]HD5]23p!1R"o,uGEbu[/6A>V:=P$/4!'P$FeC+W]B_'4i'BQKfb$V2JfWgs'39#'Q_D`]in"5-I%2mkCnRInm=kV9$(@Cg7Ii@ON]#c(8Fnlkd-UoU'G=9B.?7FEWtTK^Y=\H%]7o^W3mfS*4f]/<"+@0HACTWL3t"Fe$=8]a'XSk5q6%&r"PFeCbPQM4'?Z@BE_iZ4Ca*Q@2k>*mQMRVY'_pF"=/).(!lY0U`qPLY4E_.[T1@YF/OTMAsCibQs;(:;/m6&o\@4mjF?U4u>rb%&@-L1j&e)(j.8uhodouX;-l#3('ZUFem]jG7suKp`p6l*IU<ZDZSuL>\gnajl7n&/j?<i=4"`CF2-\cEjM0Z_,1ks;DqT\1cVl$(%Nl9EJKS9fB5'9**\5e(*!!Q'R;ONc&=F`\GFrtqG:`@GF[p/gED++jHG!DU;CKjK^"PMsmhsVnn5Mm_(5a=(GrAY.'.Dj5A414+e%0WZUO'.,OV)TH$>;$C:+Pt"O2SllL9!O<VbBW;piCr?cQ1TXU`dd$C,G:^k90E=/rWad,/BVW]'k:@3!or_S9#j;cBDR>Sq"fnGF%_X<a#<jL/u@:d:1d<9;r;Y&W<=gO$3\Lo[+GGHj"X9p(3otm.T![OU3ghP&7-+A-dkiS$ZUn3T[,-;0_]&@^pV1tfTP-b[BUV)".%+mts`YjXg9eDfcQT??oSL>+^)\OTH'SJ;a]F:R8SZ0T7WJh$.I^0iYrc/Z<p:4^I(!(T^$c4Wb<G9\A:DNg(-c"\nFlkk0DA'[Z3%lM#h^F7cM=>X&rW1!OEB-QG5(P;<Wtgco2b\ZW!(Taqj9cH@0Kat!?T54)gpHRlRf4W]qKm7+q@(4,dRmqLGnX5cd#HrYc6+'*Fk%$O'GRCSq#CPsbhE;G\E*@[f@<OhNcT:>&CHCUVNJXQFM%CcQ`hjd]I27Z6)/Z"beha;HF;;m9:mDVku_o,7c;N2.uc;j9<7Rc'Z<%V`)GVU"q-A#AG=@0V.Bp=;tVW0GoE4)nV!=m:P&AE5'LrH%F;Rpq^LKXJhV'-=B1H2gs%X/6h4*jmpe9@2-&hOcjV+(=l\1_O:Oc%jpQ.mFX[j;A&2@"1B:[82DQlU0P:YRfbN+k4';tlo!n0V9/]2b+DXj`4<f!fh$04sgYR*nb.]\t$#5C\GSp2]WMi$=89_bVasUOc%3&3/G;Yh8NY<YWKNFe+PME/Rk0cX6fb\aQ)70]8^9,u7SFT^shiYj``#fH-q8X`&"D=+H*VR^W3J3"e=1GOXG'XrVl<&$Jid0ZmD%X.eK!rHdYqB^\C(n1ehhK&]rbj,.YjT=Fr]U([36?\*2<2H`U3UPYE0RLp$?1*@+4-pnLIPF<&!@S[B2PD@t;,Fo/OZ;`V>Rhlpd%DHQSX!ph#<!_#b&iB42aNFX:i=.S5eTu0!4"Od?@^=G"'3XlonGnZ4!kS,GgUaY806*Y+fQ$dbKGiai>j;>DW1'8f"QEM,WJDpFO%`IiS#TT63LE/auWO^j(,GkV2GgW)Rf_1;jYP#A_re36m:\G%K[&0?J!cZ5K'Q_0[A]9V<tfs`m?Dle\:MA)_p$KA(ZK3bshUSK%'%=[`<ok??WGh2"]AANNiF;n6_S&U?N4fnfo;gM2B1#g/=RQA4r,Vj?lJ&Sl)=FH\6n1Ag(er*I3c[2_ph)m[PmQEVk"H'+Are?I@M%TFV7jjQ/05o$$BL!f0"%]kFlt5+MTHF@!"6);)A4EkH\GEj`7N0GL0jXqaR(J3Ls3\!5]pFmH\T"H/H<pdKe7ndCR!5.ioAmN-OB%JsDsiNJL73[VQ_.aXR@+R)3)=r57V:5I04^bT!:P=q*$.ZWlmSB"L^r[nEJp/eI(5rLH+PV'D>=!lYu/504r]3-SQ^;FlNRUD)h#%A+)QbIAS+]+hd5Gq+T,;=VcCQ"gi`akc9b%rInHiSW@Ys_ub/Dhe_U`b9cPq;Qa6'i5:SVP^Q2;Z(\K3?Q0,=#Bgs97k8jbqeVkA%9U;fVB(Ef"/s(r:9".,3*F`kdWEBF6T.Kd9dll@'7TPc.H3OQ9p#:K[\6S6o;VA'.T'qtl_6_4$>q7$B=b_3MOJMe>#>c2OcdZi@%&Lj1CCGhebH=(R6!6[DQa6Zj$">UC]Q@+pFa"*4sJ96d_T1LqYHVps<bSWUM6aE2k<Wi#::G;MRS5h&YiVmCI^2Ab\_e5Vd;rK8F%lR>Km0oWR2&YQOfP^(Zr]RBb?e^!/,]D0_&%E^'\h8oE2KNIk57;581b=I.9:Y'*8"l?WW!@jJ`GAf&-ZAb<%Ns'-b&8`jE=>Bs5%>,5?JNR(RL$G,$h=eW5;immIuD(4dYXije9(1DPlmWMK^$[Q2X0ncc/)\U12.PQ5AAk<D/H"PZp/]X1E1)aLVS0YKQ]d13K46Kh-%2.>eFH46DL+DJ1t\rkhl#(L4gEm+3bg&SdXgQcBuC4'("52ZXEP0Zd8OY%P-1TTt6dIK)gB*KEK*sd0bot`W2%8ol[<OTWH2Ii+j%&69\MFK5O7V!p[)m<%]d\Wpq6/&a:44:fIm']Z=W\h*h5MVu%mVH^0F)=T^e[]`qt4f@lGeTR:/I^!E'BT8V'3@CGc8.S^6S$C:I%A\27f(7&)1$42BtFn-6%1SK)L:MI%\)XdFpj`C<40&N;0:[e>_p>YZ.FM%G7mc*34^UV"l\\GX=^"!e1c?shcF*lX4cVMo^=4Zd]%rs(*h\3Jf`\\-Jnqk$XXqpU%dNk;4h8B!7VqV^8UpuROr?c;a$k@afaa2^5ho#\XopRC"=""iEhc2~>%AI9_PrivateDataEnd